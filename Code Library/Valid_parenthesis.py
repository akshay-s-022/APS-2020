# -*- coding: utf-8 -*-
"""
Created on Fri Mar 27 13:49:36 2020

@author: Akshay
"""
c=0
class stack:
    def push(self,a):
        self.a=a
        b.append(self.a)
    def pop(self):
        b.pop(-1)
    def isempty(self):
        if b==[]:
            return True
        return False
        
def check_validity(a):
    global c
    for i in range(len(a)):
        
        if a[i]=='(' or a[i]=='{' or a[i]=='[':
            s.push(a[i])
        
        if a[i]==')':
            if b!=[]:
                x=b[-1]
                s.pop()
                if x=='[' or x=='{':
                    return False
                c+=1
        
        elif a[i]=='}':
            if b!=[]:
                x=b[-1]
                s.pop()
                if x=='[' or x=='(':
                    return False
                c+=1
            
        elif a[i]==']':
            if b!=[]:
                x=b[-1]
                s.pop()
                if x=='(' or x=='{':
                    return False
                c+=1
    return s.isempty()
        

        
b=[]       
a="(([{}]))()[[]]"
#a="{{[[(())]]}}"
s=stack() 
if check_validity(a):
    print("Valid")
else:
    print("Not Valid")
    
##############
'''sample case:
input : "{()}"  
output : Valid   

input : "[()}"
output : Not Valid


##########################'''
Test case 1: "(({[][][]({})}))[[]]"    valid
Test case 2: "[[{[]((({(}]]))([]{){(]}{{)){]({{{(({]}{]{[))}({}][})})[{][}[(][[[{{{[{]]([{})]){{[])]{([)})}](([{[]" Not valid 100
Test case 3:st= '{))[[{]]((){}}{))(([[]{})}{)())()}}({}{[[){[][{()]{[)))[}{]]{[])(][}]])])(({])([{}}[]]}[)(]{(}})[){{[[(]]()}}])(()({(][[]][[(])))}[[[(({}[]((]]{}]]}[{])[{}[{[)]{[)[[])]((}({[[{}[}[{({[)(}(]}(([([{)({)[)}{[[[}]}]{){{}[]]))))]]{{{[((}])}{((([{]([[}[}]()]{}{}}][}){){[[{}{]}][}[{[[{{]()]][[[][{])}[]([{})[[]]]]}([)(){](()[{])}([[})}[]}({{{[)])](})]{])(()]}[})]][(){}[}{((){{){[(}(((}]}))))](((){[}(){[])]})){)]{{(){[[{{{(([)[}{)))}{}(}[{]'
    ---> Not Valid 435
Test case 4: st="{[]([]()(){{{}}}[]{([[{([{{}}])}]])})}()[][][(({{}}))[]{{(){}}}]" valid
    
Test case 5:  '{))[{){[}]{{)]]{)]]{){{}({)]}]{[{}({{)])([{}{)[([((}))[{)[)([][([)))([](}}({(]]{))){{})]}]]{}[(()]{){[]]}{){{)}[[]}[(]([{((}])}{[[)}(]]}[}}))(])([{]]]](({(]][({{][}[({[{{[](])[}]}}{{({))([)[(}}{{[[([{](}}(})})([((}]{)[}])}}}{{[[{([(](]([]{}}[)[([[}}[[)}(}][}][(]}]][[{[]})(([[][){}(}][([((]{]]{}[(){}]{][[{}[}([(}(){}}](()((){[){(]][}[[}{[][}}{(}{}[})[{}{}[)[})])}(}}{}]{(){[)((}}[[[]{])()[(({(}(}}){){}{]}[{{]]{{{]{)}])})])({)[}{]]){{)[(}{[()]()(([[[[[[{[]])])}([(]]{][)[{(}]]{({)[(({[([[}})[((]}()]{{()})){{})))]}(]]{{{))]}{{)[{}({[[)(}}])](]{)(]][{])[[]](}[}(]{{{(}){}[])](]]}{{[](}[([{]{}[[()[]][({]([}{[[[])}}([))]{]{}{]}]]}{)}[}])}){[(}[][()[[)({][}]({{][)}))[[)}[]][)(}(([)[]])}[][[[]][]](](}{{}(](][{)[]{{}[[}})[}({))]}})[[]]}]}({){}()]](}{]}}({[}[{[))][[](){)[{)][]}[][]({)[(}({(){}}[}((}(}(]{{}}})]]{)(]][])(]][]](([)[)}{)}))(}}{]}}(](}))[(}{{))){{{}{[{{[{]](]}})(})}){}{)])]}))[]({[](([}([]}]]}})][([[)()[[][]{({]{]{]}[}{)[[]}}][{}}}[]{{}[(([([()]]{][{[}]}]{}}}]]}(][})[[(}][}[]((){}(]]{}){}([]][[}}(){]}])[[]}{][])]{[{()[))(()})][[]]})}(}([{){}[(({({[][{})[{))]]]{]]{{{]]{{[]])[){(]]}}(}[}}(](]}([({}[}])}{{(]([[][}[}[{){]]}[[){]((][{]}{[}(]{(])]]{[[())})[}{[({]{{])}])](){)[]]]}][}[)[(([[{[]}[[{([[()][][[)))}]([){]]))[){){(}{[(}{]]{}{}(({[{)()]]{[({{{()){)]][((}())(}][){[}}{){[}{}][({)]}})))(}[]})}((}(){]]((]([}})}][}]]}{)(]{{((])}[}}{})}][([]}}()[)()()()}])[{{(()]{}]{{){][[))]]))[[]()()])]{]]{}}[([}}{[]]{}[}[([}({[)(}]({([]{)((})]]][{)])]}[{[]}}[})][{}{})}{]{[{[][(}{(}[{))())}}){{(){}{[]]])(})[([)][([})[]((([[)[({[}[}}}{})](}{{})[[[]{])})}()])([{]()}(}{([{){]}{{])){]{)]}}(}){{]]())(}{][(}}}]{)){[))[])[}(][[([][({{[[([}](}{[]}[}[}()]}))]]}[[}}}{}]{(}]{[[(()}[}[(((})[}()}[})}()]}}[)([([}[]]{}]](]][]((]][]]}}[{{((([{(}[}{{{(}[{[())([[]])}]([([]])[{(})}}]{}[)}[[})(((})(}({](((}({][][][(]}([)]()}[}}][}})]{([[})}](()}}}[()])((]}]}[}[{(({[){])}]])[]}))[]}[}({[[){[()[}]}([[)]}([]][){]](]{({[{}]()[([]{{[{([[[})(}}[{}([}}{}()]]))]}}(}())([])]][]}(([{[]]}})[][}){{({[)[{}{(]{][}}(][}(())}))){]{}))[]{)}(}[[{({[{(}[])){{]}}([)]}{)}[}]}}[}{{{[({}{)}]((([({[[{(){[}]){}]}]}[){]}]})(}[([)][())})(){[}[{}}})](()[[)]]([}{{]}[{){}{]}]][]}[]}[{({){]([{]}(]({({}}][([}(})])]))))])[)()]){{)[)(}}{{[[}[{{])]]{({)}}[{[[(](((}}]]{)[({{}[[(){[(](}{}][}}({}}{}[()(}[[(}[}}]]{}]])}]}((({}[)[{]}))(}]])[[]]])[[{))}}}{}[{})(]](([){[){))])}]()}}{(}}(}]{}][[)]]{}]{{[((}[[[(})(}]}]{{)}}]{]{}[{{{{(){{)()}{{}]}{)]}{}){[]}){})}[])}[{}{([((])]){({()]{]{])}}][){}()(}()({)(]({)]({](]()})]{(]]}]]]{]()((((]([[({[([{({{({()}{}}{{)}[}{()[}(](](([}}}){{)][})((}]{])[](}[[{[([({}](]][[(}{})}]}(({]]])[]})](}{{](]]]])[}}]})[{(){(}{(](})))[{))}))[((](((}][[[{[((])]{)[])]]))({(])({]]}[)}{{}(]{({{]]()][[[[))[[)[[[)}]{]{}][}{}{{)(](]}[}(][{}]}{}[]])]}}){]}[])[[{])]}{[}]}()[))}[}({[)}}(]}]]])({][}([])({]]))())}]]){[({)(]{({{[])}]})}[[}[)[{])[[(]]))()])}[}[}}[])}](){}]}){(((}{]})]){[{({]}{[))})])][[))}]][{[[{)][}{[[{)[)(}{}]]{){](}){]})](]{)}[[]]]{)){[[}[}(}(){]((}(]}){[)]][(])[])[)())]]{)[[(({)}}{}{(]})))(}}(}]][){}(}[)[({}()[)}{[]{{]{[[[]]{]{({{}[()([)(){[[[)]([]{}}[{([({]}[{{(}})]((]}]}[]}(}}]}))}}[{[[))[(}([}[[[{(}}]]{[]{}[(][}][({))[([([(]{]}[])[{}})}(}}[{][][[{}[})){{{{][[(])]([{[}]](){](}[]}{][[)])[})[)}[]}})}{}[{(((][]}{(){{}]][](}{([{})(]]([{){{)){)]](()[[([})[[]]{}[[}[{)[){[){({}{{}{][[]{)({(}}){{({)[([{{[}]]){[}((}](][)(((]{}([]}([[[((}()([}}}()](]]}(]()(([}[[[{}]][)}[))({{({(}{[}[(]}{[))))})}}))()({{](}({{{}[(}({()(({[(])]][]}]})[]}}{}(]}{(}})[]((({}()}{[]}(}{[))()'
    --->Not valid 3475
Test case 6:

d=['(',')','{','}','[',']']
import random
st=''
for i in range(10000):
    st+=d[random.randint(0,5)]
check_validity(st)
        

fp = open('easy_input3.txt','a')
fp.write(st)
fp.write('\n')
#fp.write(a+a)
fp.close()

fp=open('easy_input4.txt','w')
for x in fp:
    print(x,end='')
    
    


###
Test Case 2:
3
(){([]({[]}))}  Valid
)({)})}{}{{}{{}()}}}{}}{}}}}{{{}{}{}{}}}}}}}}})}}}}}) NV
{)}{}{[][]())([]])(]){)())}}))) NV
###







#############

def maxPath(mat,i,j,s):
    if i>=0 and i<len(mat) and j>=0 and j<len(mat[0]):
        s+= mat[i][j]
        maxPath(mat,i+1,j-1,s) or maxPath(mat,i+1,j,s) or maxPath(mat,i+1,j+1,s)
    
    return s
    
    



mat=[[1,2,4],
     [4,5,6],
     [7,8,9]]
s=0
c=[]
for i in range(len(mat[0])):
    c.append(maxPath(mat,0,i,0))
print(s)
    




i=0,j=0






z=[1,2,4]
x=[6,3,7,4]

z.any() in x





